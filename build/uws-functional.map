{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js"],"names":["each","fn","arr","isArray","isFunction","index","len","length","toType","exports","x","toString","call","match","toLowerCase","isNull","isUndefined","isObject","isString","isInteger","toJSON","JSON","stringify","join","delimeter","reduce","init","base","el","i","orig","map","out","push","filter","every","compose","fns","Array","_len","_key","args","_len2","_key2","apply","this","sequence","_len3","_key3","undefined","reverse","pick","_len4","_key4","shift","p","sum","a","b","addInt","n","square","equalTo","multiply","greaterThan","lessThan","e","keys","Object","values","composeObj","_len5","_key5","assign","hasSameElements","y","indexOf"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Returns the proper name of a JS object\n * @param  {Object} x JS object\n * @return {String}   String\n */\nexport const toType = (x) => (\n  ({}).toString.call(x).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\n);\n\n/**\n * Checks if argument is null\n * @param  {All} x Argument to be checked\n * @return {Boolean}   is null\n */\nexport const isNull = (x) => x && (toType(x) === 'null');\n\n/**\n * Checks if argument is undefined\n * @param  {All} x Argument to be checked\n * @return {Boolean}   is undefined\n */\nexport const isUndefined = (x) => x && (toType(x) === 'undefined');\n\n/**\n * Checks if argument is an array\n * @param  {All} x Argument to be checked;\n * @return {Boolean}     is an array\n */\nexport const isArray = (x) => x && toType(x) === 'array';\n\n/**\n * Checks if argument is an object\n * @param  {All} x Argument to be checked;\n * @return {Boolean}     is an object\n */\nexport const isObject = (x) => x && !isNull(x) && toType(x) === 'object';\n\n/**\n * Checks if argument is a function\n * @param  {All} x Argument to be checked;\n * @return {Boolean}     is an function\n */\nexport const isFunction = (x) => x && toType(x) === 'function';\n\n/**\n * Checks if argument is a string\n * @param  {All} x Argument to be checked\n * @return {Boolean}   is a string\n */\nexport const isString = (x) => x && toType(x) === 'string';\n\n/**\n * Checks if argument is ann integer\n * @param  {All} x Argument to be checked\n * @return {Boolean}   is an integer\n */\nexport const isInteger = (x) => (\n  (toType(x) === 'number') && (x >= 0) && (x % 1 === 0)\n);\n\n/**\n * Returns JSON\n * @param  {Any} obj Object\n * @return {String}     JSON\n */\nexport const toJSON = (x) => {\n  if (!x || isNull(x) || isUndefined(x) || isFunction(x)) return false;\n  return JSON.stringify(x);\n};\n\n/**\n * Returns a string from an array\n * @param  {Array} arr       Array\n * @param  {String} delimeter Join delimeter\n * @return {String}           String\n */\nexport const join = (arr, delimeter) => {\n  if (!isArray(arr)) return false;\n  return arr.join(delimeter || '');\n};\n\n/**\n * Simple each function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n */\nfunction each(fn, arr) {\n  if (!isArray(arr) || !isFunction(fn)) return false;\n  let index = -1;\n  const len = arr.length;\n  while (++index < len) {\n    fn(arr[index], index, arr);\n  }\n}\n\n/**\n * Simple reduce function\n * @param  {Function} fn   Iterator\n * @param  {Array}   arr  Array\n * @param  {Object/Integer/String}   init Initial value\n * @return {Object/Integer/String}        Reduced array\n */\nexport const reduce = (fn, arr, init) => {\n  if (!isArray(arr) || !isFunction(fn)) return false;\n  let base = init || 0;\n  each((el, i, orig) => {\n    base = fn(base, el, i, orig);\n  }, arr);\n  return base;\n};\n\n/**\n * Simple map function\n * @param  {Function}  fn     Iterator\n * @param  {Array}     params Array\n * @return {Array}           Array\n */\nexport const map = (fn, arr) => {\n  if (!isArray(arr) || !isFunction(fn)) return false;\n  const out = [];\n  each((el, i, orig) => {\n    out.push(fn(el, i, orig));\n  }, arr);\n  return out;\n};\n\n/**\n *\n * Simple filter function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n * @return {Array}           Array\n */\nexport const filter = (fn, arr) => {\n  if (!isArray(arr) || !isFunction(fn)) return false;\n  const out = [];\n  each((el, i, orig) => {\n    if (fn(el, i, orig)) out.push(el);\n  }, arr);\n  return out;\n};\n\n/**\n * Does each element satisfy the test\n * @param  {Function} fn  [description]\n * @param  {[type]}   arr [description]\n * @return {[type]}       [description]\n */\nexport const every = (fn, arr) => {\n  if (!isArray(arr) || !isFunction(fn)) return false;\n  let index = -1;\n  const len = arr.length;\n  while (++index < len) {\n    if (!fn(arr[index], index, arr)) return false;\n  }\n  return true;\n};\n\n/**\n * Simple compose function\n * @param  {Params} fns List of fn\n * @return {Any}        [description]\n */\nexport const compose = (...fns) => {\n  if (!fns.length) return false;\n  return function (...args) {\n    for (let i = fns.length - 1; i >= 0; i--) {\n      args = [fns[i].apply(this, [args[0]])];\n    }\n    return args[0];\n  };\n};\n\n/**\n * Simple sequence function\n * @param  {Params} args Function list\n * @return {Any}         Output\n */\nexport const sequence = (...fns) => {\n  if (!fns.length) return false;\n  return compose.apply(this, fns.reverse());\n};\n\n/**\n * Pick out object property values\n * @param  {String} p property key\n * @return {Function}    A function to test element property p\n */\nexport const pick = (...args) => {\n  const fn = (args.length === 2) ? args.shift() : null;\n  const p = args[0];\n  if ((fn && !isFunction(fn)) || !isString(p)) return false;\n  return el => (fn ? fn(el[p]) : el[p]);\n};\n\n/**\n * Simple sum function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const sum = (a, b) => {\n  if (!isInteger(a) || !isInteger(b)) return false;\n  return a + b;\n};\n\n/**\n * [description]\n * @param  {[type]} n) [description]\n * @return {[type]}    [description]\n */\nexport const addInt = (n) => (el) => el + n;\n\n/**\n * Simple square function\n * @param  {Number} num Integer\n * @return {Number}     Square\n */\nexport const square = (x) => {\n  if (!isInteger(x)) return false;\n  return x * x;\n};\n\n/**\n * Simple value checker\n * @param  {Number/String} n Value to check\n * @return {Function}   Function\n */\nexport const equalTo = (n) => {\n  if (!n) return false;\n  return el => n === el;\n};\n\n/**\n * Simple sum function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const multiply = (a, b) => {\n  if (!a || !b) return false;\n  if (!isInteger(a) || !isInteger(b)) return false;\n  return a * b;\n};\n\n/**\n * Simple greaterThan function\n * @param  {Number} n) Number to test\n * @return {Boolean}   Result of test\n */\nexport const greaterThan = (n) => {\n  if (!n) return false;\n  return el => el > n;\n};\n\n/**\n * Simple lessThan function\n * @param  {[type]} n) [description]\n * @return {[type]}    [description]\n */\nexport const lessThan = (n) => (e) => e < n;\n\n/**\n * Returns object keys\n * @param  {Object} obj Object\n * @return {Array}     Keys\n */\nexport const keys = (x) => (\n  isObject(x) && Object.keys(x)\n);\n\n/**\n * Returns object values\n * @param  {Object} obj Object\n * @return {Array}      Values\n */\nexport const values = (x) => (\n  isObject(x) && map((el) => x[el], keys(x))\n);\n\n/**\n * Creates objects from mixins\n * @param  {Objects} args Set of mixins\n * @return {Object}       New object\n */\nexport const composeObj = (...args) => (\n  Object.assign.apply({}, args)\n);\n\n/**\n * Checks whether two arrays share the same elements\n * @param  {Array} arr1 Array 1\n * @return {Function}   Tests the arr1 against any new array\n */\nexport const hasSameElements = (x) => {\n  if (!x || !isArray(x)) return false;\n  return function (y) {\n    if (x.length !== y.length) return false;\n    return every(el => x.indexOf(el) > -1, y);\n  };\n};\n"]}