{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js"],"names":["each","fn","arr","index","len","length","reduce","exports","init","base","el","i","orig","map","out","push","filter","compose","fns","Array","_len","_key","args","_len2","_key2","apply","this","sequence","_len3","_key3","undefined","reverse","pluck","p","sum","a","b","addInt","n","square","num","equalTo","e","multiply","greaterThan","lessThan","toType","x","toString","call","match","toLowerCase"],"mappings":"AAAA;mECKA,IAAMA,MAAA,SAAOC,EAAAC,UACPC,GAAQ,GACNC,EAAMF,EAFYG,SAGjBF,EAAAC,KACFF,EAAHC,GAAAA,EAJSD,IAeAI,OAAAC,QAAAD,OAAA,SAASL,EAAAC,EAAAM,MAChBC,GAAOD,GAD4B,uBAElCE,EAAAC,EAAAC,KACIX,EAAAQ,EAAAC,EAAAC,EADJC,IAFkCV,GAAnBO,GAcTI,IAAAN,QAAAM,IAAA,SAAMZ,EAAAC,MACXY,2BACDJ,EAAAC,EAAAC,KACHG,KAASd,EAAAS,EAAAC,EADNC,KAFyBV,GAAbY,GAcNE,OAAAT,QAAAS,OAAA,SAASf,EAAAC,MACdY,2BACDJ,EAAAC,EAAAC,GACCX,EAAAS,EAAAC,EAAJC,IAAqBE,EAAAC,KADlBL,IAF4BR,GAAbY,GAaTG,QAAAV,QAAAU,QAAA,sCAAcC,EAAAC,MAAAC,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,mBAAQA,gDACbC,EAAAH,MAAAI,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,mBAAMA,OACnB,GAAIb,GAAIO,EAAAb,OAAA,EAAgBM,GAAA,EAA7BA,OACUO,EAAAP,GAAAc,MAAAC,KADVJ,UAGOA,GALY,KAcVK,SAAApB,QAAAoB,SAAA,sCAAeL,EAAAH,MAAAS,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,mBAASA,SAC5BZ,SAAAQ,MAAAK,OAAoBR,EADLS,YAUXC,MAAAzB,QAAAyB,MAAA,SAAQ/B,EAAAgC,mBAAWvB,SAAQT,GAAGS,EAAtBuB,MAORC,IAAA3B,QAAA2B,IAAA,SAAMC,EAAAC,SAAUD,GAAVC,GAONC,OAAA9B,QAAA8B,OAAA,SAASC,mBAAO5B,SAAQA,GAAf4B,IAOTC,OAAAhC,QAAAgC,OAAA,SAASC,SAASA,GAATA,GAOTC,QAAAlC,QAAAkC,QAAA,SAAUH,mBAAOI,SAAOJ,KAAdI,IAOVC,SAAApC,QAAAoC,SAAA,SAAWR,EAAAC,SAAUD,GAAVC,GAOXQ,YAAArC,QAAAqC,YAAA,SAAcN,mBAAOI,SAAOA,GAAdJ,IAOdO,SAAAtC,QAAAsC,SAAA,SAAWP,mBAAOI,SAAPJ,GAAcI,IAOzBI,OAAAvC,QAAAuC,OAAA,SAASC,YACbC,SAAAC,KAAAF,GAAAG,MAAA,iBAAA,GADaC","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Simple each function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n */\nconst each = (fn, arr) => {\n  let index = -1;\n  const len = arr.length;\n  while (++index < len) {\n    fn(arr[index], index, arr);\n  }\n};\n\n/**\n * Simple reduce function\n * @param  {Function} fn   Iterator\n * @param  {Array}   arr  Array\n * @param  {Object/Integer/String}   init Initial value\n * @return {Object/Integer/String}        Reduced array\n */\nexport const reduce = (fn, arr, init) => {\n  let base = init || 0;\n  each((el, i, orig) => {\n    base = fn(base, el, i, orig);\n  }, arr);\n  return base;\n};\n\n/**\n * Simple map function\n * @param  {Function}  fn     Iterator\n * @param  {Array}     params Array\n * @return {Array}           Array\n */\nexport const map = (fn, arr) => {\n  const out = [];\n  each((el, i, orig) => {\n    out.push(fn(el, i, orig));\n  }, arr);\n  return out;\n};\n\n/**\n * Simple filter function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n * @return {Array}           Array\n */\nexport const filter = (fn, arr) => {\n  const out = [];\n  each((el, i, orig) => {\n    if (fn(el, i, orig)) out.push(el);\n  }, arr);\n  return out;\n};\n\n/**\n * Simple compose function\n * @param  {Params} fns List of fn\n * @return {Any}        [description]\n */\nexport const compose = (...fns) => {\n  return function (...args) {\n    for (let i = fns.length - 1; i >= 0; i--) {\n      args = [fns[i].apply(this, args)];\n    }\n    return args[0];\n  };\n};\n\n/**\n * Simple sequence function\n * @param  {Params} args Function list\n * @return {Any}         Output\n */\nexport const sequence = (...args) => {\n  return compose.apply(this, args.reverse());\n};\n\n/**\n * Plucks an object from an array where a property passes the test\n * @param  {Function} test Testing function\n * @param  {String}   p Object property\n * @return {Object}      Object\n */\nexport const pluck = (fn, p) => (el) => fn(el[p]);\n\n/**\n * Simple sum function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const sum = (a, b) => a + b;\n\n/**\n * [description]\n * @param  {[type]} n) [description]\n * @return {[type]}    [description]\n */\nexport const addInt = (n) => (el) => el + n;\n\n/**\n * Simple square function\n * @param  {Number} num Integer\n * @return {Number}     Square\n */\nexport const square = (num) => num * num;\n\n/**\n * Simple value checker\n * @param  {Number/String} n Value to check\n * @return {Function}   Function\n */\nexport const equalTo = (n) => (e) => n === e;\n\n/**\n * Simple sum function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const multiply = (a, b) => a * b;\n\n/**\n * Simple greaterThan function\n * @param  {Number} n) Number to test\n * @return {Boolean}   Result of test\n */\nexport const greaterThan = (n) => (e) => e > n;\n\n/**\n * Simple lessThan function\n * @param  {[type]} n) [description]\n * @return {[type]}    [description]\n */\nexport const lessThan = (n) => (e) => e < n;\n\n/**\n * Returns the proper name of a JS object\n * @param  {Object} x JS object\n * @return {String}   String\n */\nexport const toType = (x) => {\n  return ({}).toString.call(x).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n};\n"]}