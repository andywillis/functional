{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js"],"names":["getArgs","args","Array","isArray","each","fn","arr","i","l","length","reduce","init","base","el","orig","map","out","push","filter","toType","x","toString","call","match","toLowerCase","sum","exports","a","b","square","num","equalTo","n","e","multiply","greaterThan"],"mappings":"AAAA;YCKA,SAASA,SAAQC,GACf,MAAOC,OAAMC,QAAQF,EAAK,IAAMA,EAAK,GAAKA,EAQ5C,QAASG,MAAKC,EAAIC,GAChB,IAAK,GAAIC,GAAI,EAAGC,EAAIF,EAAIG,OAAYD,EAAJD,EAAOA,IACrCF,EAAGC,EAAIC,GAAIA,EAAGD,GAWX,QAASI,QAAOL,EAAIC,EAAKK,GAC9B,GAAIC,GAAOD,GAAQ,CAInB,OAHAP,MAAK,SAACS,EAAIN,EAAGO,GACXF,EAAOP,EAAGO,EAAMC,EAAIN,EAAGO,IACtBR,GACIM,EASF,QAASG,KAAIV,EAAIC,GACtB,GAAMU,KAIN,OAHAZ,MAAK,SAACS,EAAIN,EAAGO,GACXE,EAAIC,KAAKZ,EAAGQ,EAAIN,EAAGO,KAClBR,GACIU,EASF,QAASE,QAAOb,EAAIC,GACzB,GAAMU,KAIN,OAHAZ,MAAK,SAACS,EAAIN,EAAGO,GACPT,EAAGQ,EAAIN,EAAGO,IAAOE,EAAIC,KAAKJ,IAC7BP,GACIU,EA2CF,QAASG,QAAOC,GACrB,SAAYC,SAASC,KAAKF,GAAGG,MAAM,iBAAiB,GAAGC,6EA7EzCd,OAAAA,eAcAK,IAAAA,YAcAG,OAAAA,eAgDAC,OAAAA,MAnCT,IAAMM,KAAAC,QAAAD,IAAM,SAACE,EAAGC,SAAMD,GAAIC,GAOpBC,OAAAH,QAAAG,OAAS,SAACC,SAAQA,GAAMA,GAOxBC,QAAAL,QAAAK,QAAU,SAACC,SAAM,UAACC,SAAMD,KAAMC,IAO9BC,SAAAR,QAAAQ,SAAW,SAACP,EAAGC,SAAMD,GAAIC,GAOzBO,YAAAT,QAAAS,YAAc,SAACH,SAAM,UAACC,SAAMA,GAAID","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Returns an array of function arguments\n * @param  {Array} args Arguments\n * @return {Array}      Array of remunged arguments\n */\nfunction getArgs(args) {\n  return Array.isArray(args[0]) ? args[0] : args;\n}\n\n/**\n * Simple each function\n * @param  {Function}  fn     Iterator\n * @param  {...[Param list]} params Function parameters\n */\nfunction each(fn, arr) {\n  for (let i = 0, l = arr.length; i < l; i++) {\n    fn(arr[i], i, arr);\n  }\n}\n\n/**\n * Simple reduce function\n * @param  {Function} fn   Iterator\n * @param  {Array}   arr  Array\n * @param  {Object/Integer/String}   init Initial value\n * @return {Object/Integer/String}        Reduced array\n */\nexport function reduce(fn, arr, init) {\n  let base = init || 0;\n  each((el, i, orig) => {\n    base = fn(base, el, i, orig);\n  }, arr);\n  return base;\n}\n\n/**\n * Simple map function\n * @param  {Function}  fn     Iterator\n * @param  {Array}     params Array\n * @return {Array}           Array\n */\nexport function map(fn, arr) {\n  const out = [];\n  each((el, i, orig) => {\n    out.push(fn(el, i, orig));\n  }, arr);\n  return out;\n}\n\n/**\n * Simple filter function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n * @return {Array}           Array\n */\nexport function filter(fn, arr) {\n  const out = [];\n  each((el, i, orig) => {\n    if (fn(el, i, orig)) out.push(el);\n  }, arr);\n  return out;\n}\n\n/**\n * Simple add function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const sum = (a, b) => a + b;\n\n/**\n * Simple square function\n * @param  {Number} num Integer\n * @return {Number}     Square\n */\nexport const square = (num) => num * num;\n\n/**\n * Simple value checker\n * @param  {Number/String} n Value to check\n * @return {Function}   Function\n */\nexport const equalTo = (n) => (e) => n === e;\n\n/**\n * Simple sum function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const multiply = (a, b) => a * b;\n\n/**\n * Simple greaterThan function\n * @param  {Number} n) Number to test\n * @return {Boolean}   Result of test\n */\nexport const greaterThan = (n) => (e) => e > n;\n\n/**\n * Returns the proper name of a JS object\n * @param  {Object} x JS object\n * @return {String}   String\n */\nexport function toType(x) {\n  return ({}).toString.call(x).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\n"]}