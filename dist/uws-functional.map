{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js"],"names":["each","fn","arr","index","len","length","reduce","init","base","el","i","orig","map","out","push","filter","toType","x","toString","call","match","toLowerCase","sum","exports","a","b","square","num","equalTo","n","e","multiply","greaterThan","lessThan"],"mappings":"AAAA;YCKA,SAAAA,MAAAC,EAAAC,UACMC,GAAQ,GACNC,EAAMF,EAFSG,SAGdF,EAAAC,KACFF,EAAHC,GAAAA,EAJJD,GAeO,QAAAI,QAAAL,EAAAC,EAAAK,MACDC,GAAOD,GADyB,uBAE/BE,EAAAC,EAAAC,KACIV,EAAAO,EAAAC,EAAAC,EADJC,IAF+BT,GAA/BM,EAcA,QAAAI,KAAAX,EAAAC,MACCW,2BACDJ,EAAAC,EAAAC,KACHG,KAASb,EAAAQ,EAAAC,EADNC,KAFsBT,GAAtBW,EAcA,QAAAE,QAAAd,EAAAC,MACCW,2BACDJ,EAAAC,EAAAC,GACCV,EAAAQ,EAAAC,EAAJC,IAAqBE,EAAAC,KADlBL,IAFyBP,GAAzBW,EAuDA,QAAAG,QAAAC,YACEC,SAAAC,KAAAF,GAAAG,MAAA,iBAAA,GADFC,6EAnFSf,OAAAA,eAcAM,IAAAA,YAcAG,OAAAA,eAuDAC,OAAAA,MA1CT,IAAMM,KAAAC,QAAAD,IAAA,SAAME,EAAAC,SAAUD,GAAVC,GAONC,OAAAH,QAAAG,OAAA,SAASC,SAASA,GAATA,GAOTC,QAAAL,QAAAK,QAAA,SAAUC,mBAAOC,SAAOD,KAAdC,IAOVC,SAAAR,QAAAQ,SAAA,SAAWP,EAAAC,SAAUD,GAAVC,GAOXO,YAAAT,QAAAS,YAAA,SAAcH,mBAAOC,SAAOA,GAAdD,IAOdI,SAAAV,QAAAU,SAAA,SAAWJ,mBAAOC,SAAPD,GAAcC","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Simple each function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n */\nfunction each(fn, arr) {\n  let index = -1;\n  const len = arr.length;\n  while (++index < len) {\n    fn(arr[index], index, arr);\n  }\n}\n\n/**\n * Simple reduce function\n * @param  {Function} fn   Iterator\n * @param  {Array}   arr  Array\n * @param  {Object/Integer/String}   init Initial value\n * @return {Object/Integer/String}        Reduced array\n */\nexport function reduce(fn, arr, init) {\n  let base = init || 0;\n  each((el, i, orig) => {\n    base = fn(base, el, i, orig);\n  }, arr);\n  return base;\n}\n\n/**\n * Simple map function\n * @param  {Function}  fn     Iterator\n * @param  {Array}     params Array\n * @return {Array}           Array\n */\nexport function map(fn, arr) {\n  const out = [];\n  each((el, i, orig) => {\n    out.push(fn(el, i, orig));\n  }, arr);\n  return out;\n}\n\n/**\n * Simple filter function\n * @param  {Function}  fn     Iterator\n * @param  {Array} params     Array\n * @return {Array}           Array\n */\nexport function filter(fn, arr) {\n  const out = [];\n  each((el, i, orig) => {\n    if (fn(el, i, orig)) out.push(el);\n  }, arr);\n  return out;\n}\n\n/**\n * Simple add function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const sum = (a, b) => a + b;\n\n/**\n * Simple square function\n * @param  {Number} num Integer\n * @return {Number}     Square\n */\nexport const square = (num) => num * num;\n\n/**\n * Simple value checker\n * @param  {Number/String} n Value to check\n * @return {Function}   Function\n */\nexport const equalTo = (n) => (e) => n === e;\n\n/**\n * Simple sum function\n * @param {Number} a Number\n * @param {Number} b Number\n */\nexport const multiply = (a, b) => a * b;\n\n/**\n * Simple greaterThan function\n * @param  {Number} n) Number to test\n * @return {Boolean}   Result of test\n */\nexport const greaterThan = (n) => (e) => e > n;\n\n/**\n * Simple lessThan function\n * @param  {[type]} n) [description]\n * @return {[type]}    [description]\n */\nexport const lessThan = (n) => (e) => e < n;\n\n/**\n * Returns the proper name of a JS object\n * @param  {Object} x JS object\n * @return {String}   String\n */\nexport function toType(x) {\n  return ({}).toString.call(x).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\n"]}